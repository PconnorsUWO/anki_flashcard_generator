I want to make a project for this finals season such that I can automate the process I use to make flash cards outline me the project structure and skeleton files as well as improvements such that I can start this project

I current have a script that will turn a llm into a text document then I will prompt my llm to take that text document and format
the entire thing such that it is best understood for an llm. Then another prompt will turn that into json that is taken by a python script
and turns it into anki flash cards. My prompts are as follows: 

I have a large block of text from a data science course that needs to be reformatted for optimal LLM comprehension. Your task is to process this text according to the following requirements:

Preserve All Content: Do not omit or summarize any part of the original text. Every detail must be retained.
Machine-Optimized Formatting: Reformat the text in a way that is optimized for language model understanding rather than human readability. This means using structured tokens, clear section markers (like identifiers for headers, paragraphs, lists, etc.), and any other format that can help the model parse and understand the content without ambiguity.
Maintain Semantic Structure: Ensure that the relationships, hierarchies, and semantic groupings within the content are clearly annotated.
No Extraneous Human-Centric Styling: Avoid any formatting that is solely intended to enhance human aesthetics (e.g., decorative fonts, excessive whitespace) unless it aids the modelâ€™s parsing.

Below is the original text:

-----------------------------------------------------


I have a large amount of well-formatted text for a machine learning course. Please parse all of the context provided and create flashcards that capture every relevant detail (do not omit any key information unless it is merely filler). Each flashcard must be formatted as a Python dictionary in plain text, following this exact structure:

{
    'question': """<b>Your question text here:</b><br><ul>
    <li>Option A...</li>
    <li>Option B...</li>
    <li>Option C...</li>
    <li>Option D...</li>
    <li>Option E...</li>
</ul>""",
    'answer': "<b>Answer:</b> [Correct Option]"
}
Ensure that:
Every flashcard is enclosed in curly braces {} and flashcards are comma-separated.
The 'question' field uses HTML formatting (as shown) to present the question and options.
The 'answer' field clearly states the correct answer, also with HTML formatting.
The output is returned as plain text.
All relevant content from the input text is used to create comprehensive flashcards on the machine learning material.

Generate the flashcards accordingly.
Below is the given context:

-------------------------------------------------------------

and these are my python scripts to take the json format into anki cards

-------------------------------------------------------------
from quiz import gen_flashcards, generate_unique_id
import genanki

if __name__ == '__main__':

    anki_model = genanki.Model(
        generate_unique_id(), 
        'my format',
        fields=[
            {'name': 'Question'},
            {'name': 'Answer'},
        ],
        templates=[
            {
                'name': 'Card 1',
                'qfmt': '{{Question}}', 
                'afmt': '{{FrontSide}}<hr id="answer">{{Answer}}', 
            },
        ],
        css='''
        .card {
            font-family: Arial, sans-serif;
            font-size: 20px;
            text-align: left;
            color: black;
            background-color: white;
        }
        '''
    )

    gen_flashcards("week5.txt","ds3000_week5.apkg","ds3000_week5", anki_model=anki_model)

-------------------------------------------------------------------
import genanki
import random
import ast

def generate_unique_id():
    return random.randrange(1 << 30, 1 << 31)

def gen_flashcards(input_file: str, output_file: str, deck_name: str, anki_model) -> None:
    anki_deck = genanki.Deck(
        generate_unique_id(),
        deck_name
    )

    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            file_content = f.read()
            if not file_content.strip().startswith('['):
                file_content = f'[{file_content}]'
            questions_and_answers = ast.literal_eval(file_content)
    except Exception as e:
        print(f"An error occurred while reading the input file: {e}")
        return

    for qa in questions_and_answers:
        try:
            question = qa['question']
            answer = qa['answer']
        except KeyError as e:
            print(f"Missing key in QA: {e}")
            continue

        note = genanki.Note(
            model=anki_model,
            fields=[question, answer]
        )
        anki_deck.add_note(note)

    try:
        genanki.Package(anki_deck).write_to_file(output_file)
        print(f"Anki deck created and saved as {output_file}")
    except Exception as e:
        print(f"An error occurred while creating the Anki deck: {e}")



-------------------------------------------------------------------

